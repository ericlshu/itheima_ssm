<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--通过properties标签加载外部properties文件-->
    <properties resource="jdbc.properties"/>

    <!--自定义别名-->
    <typeAliases>
        <!--类型别名是为Java 类型设置一个短的名字-->
        <typeAlias type="com.eric.domain.User" alias="user"/>
    </typeAliases>

    <!--指定默认的环境名称-->
    <environments default="dev">
        <!--指定当前环境的名称-->
        <environment id="dev">
            <!--指定事务管理类型是JDBC-->
            <!--JDBC    : 这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。-->
            <!--MANAGED : 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如JEE 应用服务器的上下文）。
                          默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将closeConnection属性设置为false 来阻止它默认的关闭行为。-->
            <transactionManager type="JDBC"/>
            <!--指定当前数据源类型是连接池-->
            <dataSource type="POOLED">
                <!--数据源配置的基本参数-->
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--加载映射文件-->
    <mappers>
        <!-- <mapper resource="org/mybatis/builder/AuthorMapper.xml"/>   使用相对于类路径的资源引用-->
        <!-- <mapper url="file:///var/mappers/AuthorMapper.xml"/>        使用完全限定资源定位符（URL）-->
        <!-- <mapper class="org.mybatis.builder.AuthorMapper"/>          使用映射器接口实现类的完全限定类名-->
        <!-- <package name="org.mybatis.builder"/>                       将包内的映射器接口实现全部注册为映射器-->
        <mapper resource="com.eric/mapper/UserMapper.xml"/>
    </mappers>

</configuration>
